---

- name: Make sure the PostgreSQL databases are present
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ item.db }}"
    owner: "{{ item.owner }}"
    encoding: "{{ item.encoding }}"
    lc_collate: "{{ item.lc_collate }}"
    lc_ctype: "{{ item.lc_ctype }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "127.0.0.1"
    login_port: "{{ postgresql_port }}"
    login_user: "{{ patroni_superuser_username }}"
    login_password: "{{ patroni_superuser_password }}"
    conn_limit: "{{ item.conn_limit | default(omit) }}"
    state: present
  ignore_errors: true
  loop: "{{ postgresql_databases | flatten(1) }}"
  when: postgresql_databases is defined and postgresql_databases | length > 0
  tags: postgresql_databases

- name: Copy PostgreSQL schemas file to /tmp/ folder
  ansible.builtin.copy:
    src: dump.sql
    dest: /tmp/dump.sql
  when: postgresql_databases is defined and postgresql_databases | length > 0
  tags: postgresql_databases  

- name: "Make sure the PostgreSQL schemas are present"
  become: true
  become_user: postgres
  shell: export PGPASSWORD={{ patroni_superuser_password }}; psql -p {{ postgresql_port }} -h 127.0.0.1 -U {{ patroni_superuser_username }} -d {{ postgresql_load_dump_database }} < /tmp/dump.sql
  when: postgresql_databases is defined and postgresql_databases | length > 0
  tags: postgresql_databases  
  
#- name: Make sure the PostgreSQL schemas are present
#  become: true
#  become_user: postgres
#  community.postgresql.postgresql_db:
#    name: "{{ item.db }}"
#    owner: "{{ item.owner }}"
#    encoding: "{{ item.encoding }}"
#    lc_collate: "{{ item.lc_collate }}"
#    lc_ctype: "{{ item.lc_ctype }}"
#    template: "{{ item.template | default('template0') }}"
#    login_host: "127.0.0.1"
#    login_port: "{{ postgresql_port }}"
#    login_user: "{{ patroni_superuser_username }}"
#    login_password: "{{ patroni_superuser_password }}"
#    conn_limit: "{{ item.conn_limit | default(omit) }}"
#    state: present
#  ignore_errors: true
#  loop: "{{ postgresql_databases | flatten(1) }}"
#  when: postgresql_databases is defined and postgresql_databases | length > 0
#  tags: postgresql_databases

...
